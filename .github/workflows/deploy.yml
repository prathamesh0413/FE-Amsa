name: CI/CD Deploy without Node on EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£ Checkout Infra (CloudFormation template)
    - name: Checkout Infra
      uses: actions/checkout@v3
      with:
        path: infra

    # 2Ô∏è‚É£ Checkout Frontend
    - name: Checkout Frontend
      uses: actions/checkout@v3
      with:
        repository: 'prathamesh0413/FE-Amsa'
        path: frontend

    # 3Ô∏è‚É£ Checkout Backend
    - name: Checkout Backend
      uses: actions/checkout@v3
      with:
        repository: 'prathamesh0413/BE-Amsa'
        path: backend

    # 4Ô∏è‚É£ Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 5Ô∏è‚É£ Deploy CloudFormation Stack (EC2 only, no Node/PM2/Nginx)
    - name: Deploy CloudFormation Stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: AmsaStack
        template: ./infra/amsa-stack.yaml
        capabilities: CAPABILITY_NAMED_IAM
        parameter-overrides: KeyName=${{ secrets.EC2_KEY_NAME }}

    # 6Ô∏è‚É£ Get EC2 Public IP dynamically
    - name: Get EC2 Public IP
      id: ec2_ip
      run: |
        IP=$(aws cloudformation describe-stacks \
          --stack-name AmsaStack \
          --query "Stacks[0].Outputs[?OutputKey=='PublicIP'].OutputValue" \
          --output text)
        echo "EC2_IP=$IP" >> $GITHUB_ENV

    # 7Ô∏è‚É£ Wait for EC2 to initialize
    - name: Wait for EC2 Initialization
      run: sleep 60

    # 8Ô∏è‚É£ Setup Node.js locally (runner)
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # 9Ô∏è‚É£ Build Frontend locally
    - name: Build Frontend
      working-directory: frontend
      run: |
        npm install
        npm run build
        npm run export || true

    # üîü Build Backend locally
    - name: Prepare Backend
      working-directory: backend
      run: npm install

    # 1Ô∏è‚É£1Ô∏è‚É£ Install PM2 on EC2 (first time only) + Nginx
    - name: Setup EC2 dependencies
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ env.EC2_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          sudo apt update && sudo apt install -y nginx curl git
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt install -y nodejs
          sudo npm install -g pm2 serve
          sudo systemctl enable nginx
          sudo systemctl start nginx

    # 1Ô∏è‚É£2Ô∏è‚É£ Deploy frontend + backend to EC2
    - name: Deploy App to EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ env.EC2_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Create directories
          sudo mkdir -p /var/www/amsa-fe
          sudo mkdir -p /home/ubuntu/BE-Amsa

          # Deploy frontend
          sudo rm -rf /var/www/amsa-fe/*
          sudo cp -r ./frontend/out/* /var/www/amsa-fe/

          # Deploy backend
          rsync -av --delete ./backend/ /home/ubuntu/BE-Amsa/

          # Restart backend with PM2
          pm2 restart amsa-backend || pm2 start /home/ubuntu/BE-Amsa/server.js --name amsa-backend --watch

          # Reload Nginx
          sudo systemctl restart nginx
          pm2 save
